// Code generated by cmd/cgo; DO NOT EDIT.

//line /go/pkg/mod/github.com/mattn/go-sqlite3@v1.12.0/sqlite3_type.go:1:1
package sqlite3

/*
#ifndef USE_LIBSQLITE3
#include <sqlite3-binding.h>
#else
#include <sqlite3.h>
#endif
*/
import _ "unsafe"
import (
	"reflect"
	"time"
)

// ColumnTypeDatabaseTypeName implement RowsColumnTypeDatabaseTypeName.
func (rc *SQLiteRows) ColumnTypeDatabaseTypeName(i int) string {
	return ( /*line :18:9*/_Cfunc_GoString /*line :18:18*/)(func() *_Ctype_char{ _cgo0 := /*line :18:46*/rc.s.s; var _cgo1 _Ctype_int = _Ctype_int(i); _cgoCheckPointer(_cgo0, nil); return _Cfunc_sqlite3_column_decltype(_cgo0, _cgo1); }())
}

/*
func (rc *SQLiteRows) ColumnTypeLength(index int) (length int64, ok bool) {
	return 0, false
}

func (rc *SQLiteRows) ColumnTypePrecisionScale(index int) (precision, scale int64, ok bool) {
	return 0, 0, false
}
*/

// ColumnTypeNullable implement RowsColumnTypeNullable.
func (rc *SQLiteRows) ColumnTypeNullable(i int) (nullable, ok bool) {
	return true, true
}

// ColumnTypeScanType implement RowsColumnTypeScanType.
func (rc *SQLiteRows) ColumnTypeScanType(i int) reflect.Type {
	switch func() _Ctype_int{ _cgo0 := /*line :38:31*/rc.s.s; var _cgo1 _Ctype_int = _Ctype_int(i); _cgoCheckPointer(_cgo0, nil); return _Cfunc_sqlite3_column_type(_cgo0, _cgo1); }() {
	case ( /*line :39:7*/_Ciconst_SQLITE_INTEGER /*line :39:22*/):
		switch ( /*line :40:10*/_Cfunc_GoString /*line :40:19*/)(func() *_Ctype_char{ _cgo0 := /*line :40:47*/rc.s.s; var _cgo1 _Ctype_int = _Ctype_int(i); _cgoCheckPointer(_cgo0, nil); return _Cfunc_sqlite3_column_decltype(_cgo0, _cgo1); }()) {
		case "timestamp", "datetime", "date":
			return reflect.TypeOf(time.Time{})
		case "boolean":
			return reflect.TypeOf(false)
		}
		return reflect.TypeOf(int64(0))
	case ( /*line :47:7*/_Ciconst_SQLITE_FLOAT /*line :47:20*/):
		return reflect.TypeOf(float64(0))
	case ( /*line :49:7*/_Ciconst_SQLITE_BLOB /*line :49:19*/):
		return reflect.SliceOf(reflect.TypeOf(byte(0)))
	case ( /*line :51:7*/_Ciconst_SQLITE_NULL /*line :51:19*/):
		return reflect.TypeOf(nil)
	case ( /*line :53:7*/_Ciconst_SQLITE_TEXT /*line :53:19*/):
		return reflect.TypeOf("")
	}
	return reflect.SliceOf(reflect.TypeOf(byte(0)))
}
